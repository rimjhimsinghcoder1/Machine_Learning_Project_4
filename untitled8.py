# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nTma4Rd5Nh7iQ-xn067lsD5SZ3VN6wGc
"""

# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# Step 1: Create synthetic data
def create_synthetic_data(num_samples=300):
    np.random.seed(42)

    # Generate three clusters of data
    cluster_1 = np.random.normal(loc=[5, 5, 5], scale=1, size=(num_samples // 3, 3))
    cluster_2 = np.random.normal(loc=[10, 10, 10], scale=1.5, size=(num_samples // 3, 3))
    cluster_3 = np.random.normal(loc=[15, 15, 5], scale=1, size=(num_samples // 3, 3))

    # Combine clusters and add labels
    data = np.vstack((cluster_1, cluster_2, cluster_3))
    labels = np.array([0] * (num_samples // 3) + [1] * (num_samples // 3) + [2] * (num_samples // 3))

    # Create DataFrame
    df = pd.DataFrame(data, columns=['feature_1', 'feature_2', 'feature_3'])
    df['target'] = labels
    return df

# Step 2: Apply PCA
def apply_pca(df, n_components=2):
    features = df.columns[:-1]  # Exclude the target column

    # Standardize features
    x = StandardScaler().fit_transform(df[features])

    # Apply PCA
    pca = PCA(n_components=n_components)
    principal_components = pca.fit_transform(x)

    # Create DataFrame with PCA results
    pca_df = pd.DataFrame(data=principal_components, columns=[f'PC{i+1}' for i in range(n_components)])
    pca_df['target'] = df['target']
    return pca_df, pca

# Step 3: Plot PCA results
def plot_pca(pca_df):
    plt.figure(figsize=(8, 6))
    for target in pca_df['target'].unique():
        subset = pca_df[pca_df['target'] == target]
        plt.scatter(subset['PC1'], subset['PC2'], label=f'Cluster {target + 1}')

    plt.xlabel('Principal Component 1')
    plt.ylabel('Principal Component 2')
    plt.title('PCA of Synthetic Data')
    plt.legend()
    plt.show()

# Main function
if __name__ == "__main__":
    # Generate data, apply PCA, and plot results
    df = create_synthetic_data()
    pca_df, pca = apply_pca(df, n_components=2)

    # Print explained variance ratio
    print("Explained variance ratio:", pca.explained_variance_ratio_)

    # Plot PCA
    plot_pca(pca_df)



